import path from 'path';
import express from 'express';
import expressStaticGzip from 'express-static-gzip';
import Airtable from 'airtable';
import webpack from 'webpack';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';

import AirtableFetcher from './airtable-fetcher';
import Database from './database';

import webpackAssets from '../dist/webpack-assets';
import renderHtml from './render-html';

const isDev = process.env.NODE_ENV === 'development';

const AIRTABLE_FETCH_INTERVAL_MINUTES = 10;
const airtableBase = new Airtable({
    endpointUrl: 'https://api.airtable.com',
    apiKey: process.env.AIRTABLE_API_KEY,
}).base(process.env.AIRTABLE_API_BASE);

const airtableFetcher = new AirtableFetcher(airtableBase);

const DATABASE_PATH = path.resolve(process.cwd(), 'database.sqlite');
const database = new Database(DATABASE_PATH);

const app = express();
const port = 8000;


// Set up CORS.

app.use('/', (req, res, next) => {
    const origin = req.headers.origin;
    const allowedOrigin = process.env.CORS_ALLOWED_ORIGIN;
    if (typeof origin === 'string' && origin === allowedOrigin) {
        res.setHeader('Access-Control-Allow-Origin', allowedOrigin);
    }
    next();
});

// Serve API.

app.get('/mapbox-access-token', (req, res) => {
    res.send(process.env.MAPBOX_ACCESS_TOKEN);
});

app.get('/data/groups', (req, res) => {
    if (req.query.nonlocal === 'true') {
        res.json(database.allNonlocalGroups());
    } else if (typeof req.query.boroName === 'string') {
        res.json(database.allGroupsInBoro(req.query.boroName));
    } else {
        res.json(database.allGroups());
    }
});

app.get('/data/neighborhoods', (req, res) => {
    res.json(database.allNeighborhoods());
});

app.get('/data/neighborhoods/:neighborhoodId/groups', (req, res) => {
    const { neighborhoodId } = req.params;
    res.json(database.allGroupsInNeighborhood(neighborhoodId));
});

// Serve index HTML.
app.get('/', (req, res) => {
    const { link, script } = Object.entries(webpackAssets).reduce(({link, script}, [devPath, prodPath]) => {
        const path = isDev ? devPath : prodPath;
        if (devPath.endsWith('css')) {
            link.push(`<link href="${path}" rel="stylesheet"/>`);
        } else if (devPath.endsWith('js')) {
            script.push(`<script src="${path}"></script>`);
        }
        return {link, script};
    }, {link: [], script: []});

    const head = {
        htmlAttributes: 'lang="en"',
        title: '<title>Mutual Aid NYC Neighborhood Groups Map</title>',
        meta: [],
        link,
        script,
    };

    const htmlContent = '<div id="map"></div>';

    res.send(renderHtml(head, htmlContent));
});


// Configure the HTTP server.

// Serve static files.
app.use(express.static('public'));

if (isDev) {
    // Tell express to use the webpack-dev-middleware and
    // use the webpack config.js configuration file as a base.
    const config = require('../tools/webpack/config.js');
    const compiler = webpack(config);
    app.use(webpackDevMiddleware(compiler, {
        publicPath: config.output.publicPath,
    }));
    // Add Webpack HRM (Hot Module Replacement) middleware.
    // This provides an easy way to hot reload CSS changes in dev.
    app.use(webpackHotMiddleware(compiler));
} else {
    // Serve files generated by the build system.
    app.use('/', expressStaticGzip('dist'));
}


// Sync Airtable to Database on a timer.

async function syncAirtableToDatabase() {
    database.update(await airtableFetcher.fetch());
}

if (AIRTABLE_FETCH_INTERVAL_MINUTES > 0) {
    // Perform initial fetch.
    syncAirtableToDatabase();
    // Kickoff fetch timer.
    setInterval(() => syncAirtableToDatabase(), AIRTABLE_FETCH_INTERVAL_MINUTES * 60 * 1000);
}


// Start the HTTP server.

app.listen(port, () => console.log(`Example app listening on port ${port}!`));


// Close database on exit.

process.on('exit', () => database.close());
process.on('SIGHUP', () => process.exit(128 + 1));
process.on('SIGINT', () => process.exit(128 + 2));
process.on('SIGTERM', () => process.exit(128 + 15));
